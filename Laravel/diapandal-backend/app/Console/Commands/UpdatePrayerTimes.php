<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\PrayerTimeService;
use App\Models\PrayerTime;

class UpdatePrayerTimes extends Command
{
    protected $signature = 'prayer-times:update 
                            {city? : Ville pour les horaires (d√©faut: Touba)}
                            {--days=7 : Nombre de jours √† mettre √† jour}
                            {--force : Forcer la mise √† jour m√™me si existe d√©j√†}
                            {--country=Senegal : Pays pour la recherche}';

    protected $description = 'Mettre √† jour les horaires de pri√®re dans la base de donn√©es';

    public function handle(PrayerTimeService $prayerTimeService)
    {
        $city = $this->argument('city') ?: 'Touba';
        $days = (int) $this->option('days');
        $force = $this->option('force');
        $country = $this->option('country');
        $method = 12; // M√©thode UOIF

        $this->info("üïå Mise √† jour des horaires de pri√®re pour {$city}, {$country} sur {$days} jours...");

        $bar = $this->output->createProgressBar($days);
        $bar->start();

        $updatedCount = 0;
        $skippedCount = 0;
        $errorCount = 0;

        for ($i = 0; $i < $days; $i++) {
            $date = now()->addDays($i)->format('Y-m-d');
            
            // V√©rifier si l'entr√©e existe d√©j√† (sauf si --force)
            if (!$force && PrayerTime::where('date', $date)->where('city', $city)->exists()) {
                $skippedCount++;
                $bar->advance();
                continue;
            }

            try {
                $prayerTimeData = $prayerTimeService->fetchPrayerTimeData($city, $country, $method, $date);
                
                if ($prayerTimeData) {
                    PrayerTime::updateOrCreate(
                        [
                            'date' => $date,
                            'city' => $city
                        ],
                        $prayerTimeData
                    );
                    $updatedCount++;
                    $this->line(" ‚úÖ {$date} mis √† jour");
                } else {
                    $errorCount++;
                    $this->error(" ‚ùå {$date} erreur de r√©cup√©ration");
                }
            } catch (\Exception $e) {
                $errorCount++;
                $this->error(" ‚ùå {$date}: " . $e->getMessage());
            }

            $bar->advance();
            
            // Petite pause pour ne pas surcharger l'API
            if ($i < $days - 1) {
                sleep(1);
            }
        }

        $bar->finish();
        $this->newLine();

        $this->info("‚úÖ Mise √† jour termin√©e !");
        $this->info("üìä Statistiques:");
        $this->info("   - Jours mis √† jour: {$updatedCount}");
        $this->info("   - Jours ignor√©s: {$skippedCount}");
        $this->info("   - Erreurs: {$errorCount}");
        $this->info("   - Total trait√©: {$days} jours");
        
        if ($errorCount > 0) {
            $this->error("‚ö†Ô∏è  Certaines dates ont eu des erreurs. V√©rifiez les logs.");
        }
    }
}